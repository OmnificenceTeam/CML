/* Mega pixel image rendering library for iOS6 Safari */
(function () { function c(i) { var h = i.naturalWidth, k = i.naturalHeight; if (h * k > 1024 * 1024) { var j = document.createElement("canvas"); j.width = j.height = 1; var g = j.getContext("2d"); g.drawImage(i, -h + 1, 0); return g.getImageData(0, 0, 1, 1).data[3] === 0 } else { return false } } function d(k, h, p) { var g = document.createElement("canvas"); g.width = 1; g.height = p; var q = g.getContext("2d"); q.drawImage(k, 0, 0); var j = q.getImageData(0, 0, 1, p).data; var n = 0; var l = p; var o = p; while (o > n) { var i = j[(o - 1) * 4 + 3]; if (i === 0) { l = o } else { n = o } o = (l + n) >> 1 } var m = (o / p); return (m === 0) ? 1 : m } function f(g, i, j) { var h = document.createElement("canvas"); a(g, h, i, j); return h.toDataURL("image/jpeg", i.quality || 0.8) } function a(z, j, k, g) { var m = z.naturalWidth, q = z.naturalHeight; var u = k.width, t = k.height; var v = j.getContext("2d"); v.save(); b(j, v, u, t, k.orientation); var i = c(z); if (i) { m /= 2; q /= 2 } var y = 1024; var h = document.createElement("canvas"); h.width = h.height = y; var l = h.getContext("2d"); var w = g ? d(z, m, q) : 1; var p = Math.ceil(y * u / m); var x = Math.ceil(y * t / q / w); var r = 0; var n = 0; while (r < q) { var s = 0; var o = 0; while (s < m) { l.clearRect(0, 0, y, y); l.drawImage(z, -s, -r); v.drawImage(h, 0, 0, y, y, o, n, p, x); s += y; o += p } r += y; n += x } v.restore(); h = l = null } function b(j, h, k, g, i) { switch (i) { case 5: case 6: case 7: case 8: j.width = g; j.height = k; break; default: j.width = k; j.height = g } switch (i) { case 2: h.translate(k, 0); h.scale(-1, 1); break; case 3: h.translate(k, g); h.rotate(Math.PI); break; case 4: h.translate(0, g); h.scale(1, -1); break; case 5: h.rotate(0.5 * Math.PI); h.scale(1, -1); break; case 6: h.rotate(0.5 * Math.PI); h.translate(0, -g); break; case 7: h.rotate(0.5 * Math.PI); h.translate(k, -g); h.scale(-1, 1); break; case 8: h.rotate(-0.5 * Math.PI); h.translate(-k, 0); break; default: break } } function e(i) { if (window.Blob && i instanceof Blob) { var h = new Image(); var g = window.URL && window.URL.createObjectURL ? window.URL : window.webkitURL && window.webkitURL.createObjectURL ? window.webkitURL : null; if (!g) { throw Error("No createObjectURL function found to create blob url") } h.src = g.createObjectURL(i); this.blob = i; i = h } if (!i.naturalWidth && !i.naturalHeight) { var j = this; i.onload = function () { var m = j.imageLoadListeners; if (m) { j.imageLoadListeners = null; for (var l = 0, k = m.length; l < k; l++) { m[l]() } } }; this.imageLoadListeners = [] } this.srcImage = i } e.prototype.render = function (m, t) { if (this.imageLoadListeners) { var l = this; this.imageLoadListeners.push(function () { l.render(m, t) }); return } t = t || {}; var n = this.srcImage.naturalWidth, o = this.srcImage.naturalHeight, h = t.width, r = t.height, q = t.maxWidth, p = t.maxHeight, s = !this.blob || this.blob.type === "image/jpeg"; if (h && !r) { r = (o * h / n) << 0 } else { if (r && !h) { h = (n * r / o) << 0 } else { h = n; r = o } } if (q && h > q) { h = q; r = (o * h / n) << 0 } if (p && r > p) { r = p; h = (n * r / o) << 0 } var g = { width: h, height: r }; for (var j in t) { g[j] = t[j] } var i = m.tagName.toLowerCase(); if (i === "img") { m.src = f(this.srcImage, g, s) } else { if (i === "canvas") { a(this.srcImage, m, g, s) } } if (typeof this.onrender === "function") { this.onrender(m) } }; if (typeof define === "function" && define.amd) { define([], function () { return e }) } else { this.MegaPixImage = e } })();